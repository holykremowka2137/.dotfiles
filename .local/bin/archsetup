#!/bin/bash

sudo pacman -Syyu

which_cpu() {
    echo 
    read -rp "What CPU do you have? AMD or intel? [(A)md/(I)ntel]: " choice
    if [ "$choice" == "amd" ] ||  [ "$choice" == "a" ]; then
        sudo pacman -S amd-ucode
        echo "AMD drivers installed!"
    elif [ "$choice" == "intel" ] || [ "$choice" == "i" ]; then
        sudo pacman -S intel-ucode
        echo "Intel drivers installed!"
    else
        echo
        echo "Are you sure about that?"
        which_cpu
    fi
}

xvswl() {
    echo 
    read -rp "Do you want X11 or Wayland? [x/w]: " choice
    if [ "$choice" == "x" ]; then
        sudo pacman -S xorg xorg-xinit xclip picom redshift xdotool flameshot 
        echo "Xorg installed!"
    elif [ "$choice" == "w" ]; then
        sudo pacman -S wayland wlroots pywlroots python-pywayland python-xkbcommon xorg-xwayland wl-clipboard gammastep ydotool xdg-desktop-portal-wlr grim slurp
        echo
        echo "Wayland installed! This is the future!"
    else
        echo
        echo "Are you sure about that?"
        xvswl
    fi
}

packages () {
    echo
    echo "Installing fonts..."
    echo
    sudo pacman -S ttf-jetbrains-mono ttf-nerd-fonts-symbols-mono ttf-nerd-fonts-symbols-common noto-fonts-extra noto-fonts-emoji noto-fonts-cjk 
    echo
    echo "Done!"

    echo  "Installing apps..."
    echo
    sudo pacman -S vivaldi thunderbird krita ristretto libreoffice-still okular xed steam deluge-gtk psensor alacritty kitty gparted file-roller file-roller fcitx-im fcitx-mozc fcitx-configtool lxappearance rofi rofi-emoji networkmanager hunspell-en_US bluez bluez-utils signal-desktop totem obs-studio kvantum
    echo
    echo "Done!"

    echo "Installing command-line apps..."
    echo
    sudo pacman -S neovim yt-dlp python-pycryptodome mpv python-pip python-pygame man-db sagemath ufw ffmpeg brotli python-mutagen python-pyxattr fish p7zip unrar tar rsync neofetch uwufetch htop exfat-utils fuse-exfat ntfs-3g flac jasper aria2 curl wget lf starship reflector plocate unzip zip dunst cmatrix cython python-jupymake
    echo
    echo "Done!"

    echo "Installing pipewire..."
    sudo pacman -S pipewire pipewire-pulse pipewire-jack wireplumber helvum easyeffects calf yelp pipewire-alsa alsa-utils lib32-pipewire pipewire-audio lib32-pipewire-jack
    echo
    echo "Done!"

    echo "Finished!"
}

file_manager() {
    echo 
    echo "What GUI file manager do you want?" 
    echo "Thunar [1]"
    echo "Nemo [2]"
    echo "Both [3]"
    read -rp "Your choice: " choice 
    if [ "$choice" == "1" ]; then
        echo "Installing thunar..."
        sudo pacman -S thunar catfish gvfs thunar-archive-plugin thunar-media-tags-plugin thunar-volman tumbler gobject-introspection intltool gvfs-mtp ffmpegthumbnailer
        echo "Done!"
    elif [ "$choice" == "2" ]; then
        echo "Installing nemo..."
        sudo pacman -S nemo cinnamon-translations nemo-image-converter nemo-preview
        echo "Done!"
    elif [ "$choice" == "3" ]; then
        echo "Installing both of them..."
        sudo pacman -S thunar catfish gvfs thunar-archive-plugin thunar-media-tags-plugin thunar-volman tumbler gobject-introspection intltool gvfs-mtp ffmpegthumbnailer nemo cinnamon-translations nemo-image-converter nemo-preview
        echo "Done!"
    else
        echo 
        echo "Are you sure about that?"
        DM
    fi
}

Neovim() {
    echo
    read -rp "Do you want to install based Nvim configuration? [y/n]: " choice
    if [ "$choice" == "y" ]; then
        sudo pacman -S --needed nvim fd ripgrep npm 
        git clone git@github.com:holykremowka2137/init.lua.git ~/.config/nvim && nvim
        ln -s .local/state/nvim/swap/ ~/nvim-swap
        echo "Configuration installed!"
        echo "All official packages installed."
    elif [ "$choice" == "n" ]; then
        echo "Skipping."
    else 
        echo
        echo "Are you sure about that?"
        Neovim    
    fi
}

doomemacs() {
    echo
    read -rp "Do you want to install Doom Emacs? [y/n] " choice
    if [ "$choice" == "y" ]; then
        sudo pacman -S --needed emacs-nativecomp fd ripgrep npm 
        git clone https://github.com/hlissner/doom-emacs ~/.emacs.d
        ~/.emacs.d/bin/doom install
        echo "Doom Emacs installed!"
        echo "All official packages installed."
    elif [ "$choice" == "n" ]; then
        echo "Skipping."
    else 
        echo
        echo "Are you sure about that?"
        doomemacs 
    fi
}

dotfiles() {
    echo 
    read -rp "Do you want to download your dotfiles from GitHub? [y/n]: " choice
    if [ "$choice" == "y" ]; then
        sudo pacman -S stow
        git clone git@github.com:holykremowka2137/dotfiles.git ~/Repos/dotfiles/
        cd ~/Repos/dotfiles/.config/
        stow -v --target="$HOME"/.config/ .
        mkdir ~/.local/bin/
        cd ~/Repos/dotfiles/.local/bin/
        stow -v --target="$HOME"/.local/bin/ .
        echo "Dotfiles are done."
    elif [ "$choice" == "n" ]; then
        echo "Skipping."
    else 
        echo
        echo "Are you sure about that?"
        dotfiles
    fi
}

install_paru() {
    echo
    read -rp "Do you want paru on this machine? [y/n]: " choice
    if [ "$choice" == "y" ]; then
        sudo pacman -S --needed base-devel git
        git clone https://aur.archlinux.org/paru.git
        cd paru
        makepkg -si
        echo "Paru built."
        install_aur
    elif [ "$choice" == "n" ]; then
        echo "Skipping."
    else
        echo
        echo "Are you sure about that?"
        install_paru
    fi
}

install_aur() {
    echo
    echo "Do you want to install software from AUR? [y/n]: "
    read -rp "(software in question: catppuccin-gtk-theme-mocha catppuccin-cursors-mocha papirus-folders-catppuccin-git qtile-extras brillo auto-cpufreq librewolf-bin kvantum-theme-catppuccin-git) " choice
    if [ "$choice" == "y" ]; then
        paru -S catppuccin-gtk-theme-mocha catppuccin-cursors-mocha papirus-folders-catppuccin-git qtile-extras brillo auto-cpufreq librewolf-bin kvantum-theme-catppuccin-git
        sudo auto-cpufreq --install
        echo "AUR packages built."
    elif [ "$choice" == "n" ]; then
      echo "skipping"
    else
        echo
        echo "Are you sure about that?"
        install_aur
    fi
}

install_flatpak() {
    echo 
    read -rp "Do you want to install Flatpak? [y/n]: " choice
    if [ "$choice" == "y" ]; then
        sudo pacman -S flatpak flatpak-xdg-utils
        echo "Flatpak installed."
    elif [ "$choice" == "n" ]; then
        echo "Skipping."
    else 
        echo
        echo "Are you sure about that?"
        install_flatpak
    fi
}

DM () {
    echo
    echo "Choose the DM you want from the below list: "
    echo "Ly-DM [1]"
    echo "SDDM [2]"
    echo "LightDM [3]"
    echo "Nothing [4]"
    read -rp "Your choice: " choice 
    if [ "$choice" == "1" ]; then
        echo "Installing Ly and uninstalling LightDM..."
        sudo pacman -S ly && sudo pacman -Rns lightdm
        echo "Done!"
        echo "Enabling Ly..."
        sudo systemctl enable ly
        echo "Done!"
    elif [ "$choice" == "2" ]; then
        echo "Installing SDDM and uninstalling LightDM..."
        sudo pacman -S sddm && sudo pacman -Rns lightdm
        echo "Done!"
        echo "Enabling SDDM..."
        sudo systemctl enable sddm
        echo "Done!"
    elif [ "$choice" == "3" ]; then
        echo "Enabling LightDM..."
        sudo systemctl enable lightdm
        echo "Done!"
    elif [ "$choice" == "4" ]; then
        echo "Uninstalling LightDM..."
        sudo pacman -Rns lightdm
        echo "Done! Enjoy your bloat-free system!"
    else
        echo 
        echo "Are you sure about that?"
        DM
    fi
}

enabling() {
    echo
    echo "Enabling Bluetooth..."
    sudo systemctl enable bluetooth
    echo "Done!"

    echo "Enabling 'locate' & adding user to groups..."
    sudo updatedb
    sudo usermod -aG locate,wheel,video,tty,dbus,input "$USER"
    echo "Done!"

    echo "Remapping caps lock..."
    setxkbmap -option "caps:escape_shifted_capslock"
    sudo localectl set-x11-keymap us '' '' caps:escape_shifted_capslock
    echo "Done!"

    # echo "Exporting variables..."
    # export SUDO_EDITOR
    # export EDITOR
    # export VISUAL
    # echo "Finished exporting variables!"

    echo "Enabling autostart.sh..."
    chmod +x ~/.config/qtile/autostart.sh
    echo "Done!"

    echo "Changing colors of Papirus Icon Theme..."
    papirus-folders -C cat-mocha-pink --theme Papirus-Dark
    echo "Done!"
}

rebooting() {
    echo
    read -rp "Do you want to reboot? [y/n]: " choice
    if [ "$choice" == "y" ]; then
        reboot
    elif [ "$choice" == "n" ]; then
        echo "Finished script! Well done!"
        echo
    else 
        echo 
        echo "Are you sure about that?"
        rebooting
    fi
}

which_cpu
xvswl
packages
file_manager
Neovim
doomemacs
dotfiles
install_paru
install_aur
install_flatpak
DM
enabling
rebooting
